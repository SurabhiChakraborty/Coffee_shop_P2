-- Monday Coffee Shop --

DROP TABLE IF EXISTS sales;
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS city;


-------- Table CITY ------
CREATE TABLE city(
city_id	INT PRIMARY KEY,
city_name VARCHAR(15),
population BIGINT,
estimated_rent FLOAT,
city_rank INT
);


-------- Table CUSTOMERS ------
CREATE TABLE customers(
customer_id	INT PRIMARY KEY,
customer_name VARCHAR(25),	
city_id INT,
CONSTRAINT fk_city FOREIGN KEY (city_id) REFERENCES city(city_id)
);


-------- Table PRODUCTS ------
CREATE TABLE products(
product_id INT PRIMARY KEY,
product_name VARCHAR(35),
price float
);


-------- Table SALES ------
CREATE TABLE sales(
sale_id INT PRIMARY KEY,	
sale_date date,
product_id INT,
customer_id	INT,
total FLOAT,
rating INT,
CONSTRAINT fk_products FOREIGN KEY (product_id) REFERENCES products(product_id),
CONSTRAINT fk_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


SELECT * FROM city;
SELECT * FROM products;
SELECT * FROM customers;
SELECT * FROM sales;


------------------ QUERIES----------------------


-- 1. How many total sales transactions are recorded?
SELECT COUNT(*) AS total_sales FROM sales;


-- 2. What are the names and prices of products sold in the coffee shop?
SELECT product_name, price FROM products;


-- 3. Which customers are from the city 'Mumbai'?
SELECT customer_name
FROM customers
WHERE city_id = (SELECT city_id FROM city WHERE city_name = 'Mumbai');


-- 4. Find all sales that occurred on 2024-02-10.
SELECT * FROM sales
WHERE sale_date = '2024-02-10';


-- 5. What are the unique city ranks in the database?
SELECT DISTINCT city_rank FROM city;


-- 6. List the names of all customers along with the city they live in.
SELECT cu.customer_name, ci.city_name
FROM customers cu
JOIN city ci ON cu.city_id = ci.city_id;


-- 7. Which product was sold most recently?
SELECT *
FROM sales
ORDER BY sale_date DESC
LIMIT 1;


-- 8. Get the population and estimated rent of each city.
SELECT city_name, population, estimated_rent FROM city;


-- 9. Find the total number of unique customers who made purchases.
SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM sales;


-- 10. Which products were sold more than once?
SELECT product_id, COUNT(*) AS times_sold
FROM sales
GROUP BY product_id
HAVING COUNT(*) > 1;


-- 11. Find all sales that received a rating of 5.
SELECT * FROM sales
WHERE rating = 5;


-- 12. Which cities have a population greater than 1 million?
SELECT * FROM city
WHERE population > 1000000;


-- 13. What is the total revenue generated by each product?
SELECT p.product_name, SUM(s.total) AS revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue DESC;


-- 14. Find the average rating per product.
SELECT p.product_name, AVG(s.rating) AS avg_rating
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name;


-- 15. Which city generated the highest total sales?
SELECT ci.city_name, SUM(s.total) AS city_sales
FROM sales s
JOIN customers cu ON s.customer_id = cu.customer_id
JOIN city ci ON cu.city_id = ci.city_id
GROUP BY ci.city_name
ORDER BY city_sales DESC
LIMIT 1;


-- 16. List customers who made more than 3 purchases.
SELECT customer_id, COUNT(*) AS purchase_count
FROM sales
GROUP BY customer_id
HAVING COUNT(*) > 3;


-- 17. Rank all cities based on total revenue generated.
SELECT ci.city_name, SUM(s.total) AS revenue,
       RANK() OVER (ORDER BY SUM(s.total) DESC) AS city_rank
FROM sales s
JOIN customers cu ON s.customer_id = cu.customer_id
JOIN city ci ON cu.city_id = ci.city_id
GROUP BY ci.city_name;


-- 18. Which product has the highest average rating?
SELECT p.product_name, AVG(s.rating) AS avg_rating
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY avg_rating DESC
LIMIT 1;


-- 19. Calculate average sales per day.
SELECT sale_date, AVG(total) AS avg_daily_sales
FROM sales
GROUP BY sale_date;


-- 20. Which customers have never made a purchase?
SELECT * FROM customers
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM sales);


-- 21. Find the top 3 highest spending customers.
SELECT cu.customer_name, SUM(s.total) AS total_spent
FROM sales s
JOIN customers cu ON s.customer_id = cu.customer_id
GROUP BY cu.customer_name
ORDER BY total_spent DESC
LIMIT 3;


-- 22. What is the total revenue and average rating for each city?
SELECT ci.city_name, SUM(s.total) AS total_revenue, AVG(s.rating) AS avg_rating
FROM sales s
JOIN customers cu ON s.customer_id = cu.customer_id
JOIN city ci ON cu.city_id = ci.city_id
GROUP BY ci.city_name;


-----------------------------------------------------------------------------------------------------------------------









